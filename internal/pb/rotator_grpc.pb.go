// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/rotator/rotator.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RotatorClient is the client API for Rotator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RotatorClient interface {
	// CreateBanner creates a new banner.
	CreateBanner(ctx context.Context, in *CreateBannerRequest, opts ...grpc.CallOption) (*CreateBannerResponse, error)
	// CreateSlot creates a new slot.
	CreateSlot(ctx context.Context, in *CreateSlotRequest, opts ...grpc.CallOption) (*CreateSlotResponse, error)
	// CreateGroup creates a new group.
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	// AddBanner adds the banner to the slot.
	AddBanner(ctx context.Context, in *AddBannerRequest, opts ...grpc.CallOption) (*AddBannerResponse, error)
	// DeleteBanner removes the banner from the slot.
	DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*DeleteBannerResponse, error)
	// AddClick adds a click on the banner.
	AddClick(ctx context.Context, in *AddClickRequest, opts ...grpc.CallOption) (*AddClickResponse, error)
	// AddBannerDisplay adds a banner to display.
	AddBannerDisplay(ctx context.Context, in *AddBannerDisplayRequest, opts ...grpc.CallOption) (*AddBannerDisplayResponse, error)
}

type rotatorClient struct {
	cc grpc.ClientConnInterface
}

func NewRotatorClient(cc grpc.ClientConnInterface) RotatorClient {
	return &rotatorClient{cc}
}

func (c *rotatorClient) CreateBanner(ctx context.Context, in *CreateBannerRequest, opts ...grpc.CallOption) (*CreateBannerResponse, error) {
	out := new(CreateBannerResponse)
	err := c.cc.Invoke(ctx, "/rotator.Rotator/CreateBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotatorClient) CreateSlot(ctx context.Context, in *CreateSlotRequest, opts ...grpc.CallOption) (*CreateSlotResponse, error) {
	out := new(CreateSlotResponse)
	err := c.cc.Invoke(ctx, "/rotator.Rotator/CreateSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotatorClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := c.cc.Invoke(ctx, "/rotator.Rotator/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotatorClient) AddBanner(ctx context.Context, in *AddBannerRequest, opts ...grpc.CallOption) (*AddBannerResponse, error) {
	out := new(AddBannerResponse)
	err := c.cc.Invoke(ctx, "/rotator.Rotator/AddBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotatorClient) DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*DeleteBannerResponse, error) {
	out := new(DeleteBannerResponse)
	err := c.cc.Invoke(ctx, "/rotator.Rotator/DeleteBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotatorClient) AddClick(ctx context.Context, in *AddClickRequest, opts ...grpc.CallOption) (*AddClickResponse, error) {
	out := new(AddClickResponse)
	err := c.cc.Invoke(ctx, "/rotator.Rotator/AddClick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotatorClient) AddBannerDisplay(ctx context.Context, in *AddBannerDisplayRequest, opts ...grpc.CallOption) (*AddBannerDisplayResponse, error) {
	out := new(AddBannerDisplayResponse)
	err := c.cc.Invoke(ctx, "/rotator.Rotator/AddBannerDisplay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RotatorServer is the server API for Rotator service.
// All implementations must embed UnimplementedRotatorServer
// for forward compatibility
type RotatorServer interface {
	// CreateBanner creates a new banner.
	CreateBanner(context.Context, *CreateBannerRequest) (*CreateBannerResponse, error)
	// CreateSlot creates a new slot.
	CreateSlot(context.Context, *CreateSlotRequest) (*CreateSlotResponse, error)
	// CreateGroup creates a new group.
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	// AddBanner adds the banner to the slot.
	AddBanner(context.Context, *AddBannerRequest) (*AddBannerResponse, error)
	// DeleteBanner removes the banner from the slot.
	DeleteBanner(context.Context, *DeleteBannerRequest) (*DeleteBannerResponse, error)
	// AddClick adds a click on the banner.
	AddClick(context.Context, *AddClickRequest) (*AddClickResponse, error)
	// AddBannerDisplay adds a banner to display.
	AddBannerDisplay(context.Context, *AddBannerDisplayRequest) (*AddBannerDisplayResponse, error)
	mustEmbedUnimplementedRotatorServer()
}

// UnimplementedRotatorServer must be embedded to have forward compatible implementations.
type UnimplementedRotatorServer struct {
}

func (UnimplementedRotatorServer) CreateBanner(context.Context, *CreateBannerRequest) (*CreateBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanner not implemented")
}
func (UnimplementedRotatorServer) CreateSlot(context.Context, *CreateSlotRequest) (*CreateSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSlot not implemented")
}
func (UnimplementedRotatorServer) CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedRotatorServer) AddBanner(context.Context, *AddBannerRequest) (*AddBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBanner not implemented")
}
func (UnimplementedRotatorServer) DeleteBanner(context.Context, *DeleteBannerRequest) (*DeleteBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBanner not implemented")
}
func (UnimplementedRotatorServer) AddClick(context.Context, *AddClickRequest) (*AddClickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClick not implemented")
}
func (UnimplementedRotatorServer) AddBannerDisplay(context.Context, *AddBannerDisplayRequest) (*AddBannerDisplayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBannerDisplay not implemented")
}
func (UnimplementedRotatorServer) mustEmbedUnimplementedRotatorServer() {}

// UnsafeRotatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RotatorServer will
// result in compilation errors.
type UnsafeRotatorServer interface {
	mustEmbedUnimplementedRotatorServer()
}

func RegisterRotatorServer(s grpc.ServiceRegistrar, srv RotatorServer) {
	s.RegisterService(&Rotator_ServiceDesc, srv)
}

func _Rotator_CreateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotatorServer).CreateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rotator.Rotator/CreateBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotatorServer).CreateBanner(ctx, req.(*CreateBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rotator_CreateSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotatorServer).CreateSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rotator.Rotator/CreateSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotatorServer).CreateSlot(ctx, req.(*CreateSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rotator_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotatorServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rotator.Rotator/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotatorServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rotator_AddBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotatorServer).AddBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rotator.Rotator/AddBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotatorServer).AddBanner(ctx, req.(*AddBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rotator_DeleteBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotatorServer).DeleteBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rotator.Rotator/DeleteBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotatorServer).DeleteBanner(ctx, req.(*DeleteBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rotator_AddClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotatorServer).AddClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rotator.Rotator/AddClick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotatorServer).AddClick(ctx, req.(*AddClickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rotator_AddBannerDisplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBannerDisplayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotatorServer).AddBannerDisplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rotator.Rotator/AddBannerDisplay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotatorServer).AddBannerDisplay(ctx, req.(*AddBannerDisplayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rotator_ServiceDesc is the grpc.ServiceDesc for Rotator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rotator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rotator.Rotator",
	HandlerType: (*RotatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBanner",
			Handler:    _Rotator_CreateBanner_Handler,
		},
		{
			MethodName: "CreateSlot",
			Handler:    _Rotator_CreateSlot_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Rotator_CreateGroup_Handler,
		},
		{
			MethodName: "AddBanner",
			Handler:    _Rotator_AddBanner_Handler,
		},
		{
			MethodName: "DeleteBanner",
			Handler:    _Rotator_DeleteBanner_Handler,
		},
		{
			MethodName: "AddClick",
			Handler:    _Rotator_AddClick_Handler,
		},
		{
			MethodName: "AddBannerDisplay",
			Handler:    _Rotator_AddBannerDisplay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/rotator/rotator.proto",
}
